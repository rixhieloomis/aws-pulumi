---
- name: Install AWS CLI using curl and apk
  hosts: localhost
  tasks:
    - name: Download AWS CLI package
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscli-exe-linux-x86_64.zip"

    - name: Unzip the downloaded package
      shell: unzip /tmp/awscli-exe-linux-x86_64.zip -d /tmp
      args:
        creates: "/tmp/aws"

    - name: Move AWS CLI binaries to /usr/local/bin
      shell: mv /tmp/aws /usr/local/bin/aws
      args:
        creates: "/usr/local/bin/aws"

    - name: Clean up temporary files
      file:
        path: "/tmp/{{ item }}"
        state: absent
      with_items:
        - awscli-exe-linux-x86_64.zip
        - aws

    - name: Verify AWS CLI installation
      command: aws --version
      register: aws_version
      ignore_errors: true

    - name: Print AWS CLI version
      debug:
        var: aws_version.stdout_lines

- name: Create AWS Config and Credentials files
  hosts: localhost
  tasks:
    - name: Read input lines from file
      slurp:
        src: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/input.txt"
      register: input_content
    - set_fact:
        input_lines: "{{ input_content.content | b64decode | regex_replace('\\r\\n|\\r|\\n', '\\n') | split('\n') }}"
      changed_when: false

    - name: Print input_lines
      debug:
        var: input_lines

    - name: Process input lines and create config and credentials files
      block:
        - name: Extract account ID and volume ID from input lines
          set_fact:
            account_id: "{{ item.split(' : ')[0] }}"
            volume_id: "{{ item.split(' : ')[1] }}"
          loop: "{{ input_lines }}"

        - name: Ensure config dir exists
          file:
            path: "~/.aws"
            state: directory
        
        - name: Ensure config file exists
          file:
            path: "~/.aws/config"
            state: touch

        - name: Create AWS config file
          copy:
            content: |
              [profile {{ account_id }}]
              region = {{ region }}
              role_arn = arn:aws:iam::{{ account_id }}:role/{{ rolename }}
              external_id= {{ external_id}}
            dest: "~/.aws/config"
          with_items: "{{ input_lines }}"
      delegate_to: localhost

    - name: Get attached instances and filter by running state
      shell: "aws ec2 describe-volumes --region {{ region }} --volume-ids {{ item.split(' : ')[1] }} --query 'Volumes[0].Attachments[?State==`attached`].InstanceId' --output text --profile {{ item.split(' : ')[0] }}"
      loop: "{{ input_lines }}"
      register: instance_ids
      changed_when: false
      ignore_errors: true

    - name: Ensure output file exists
      file:
        path: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/output.txt"
        state: touch
      delegate_to: localhost
    - name: Generate output file with running instances
      blockinfile:
        path: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/output.txt"
        block: |
          {% for item in instance_ids.results %}
          {% if item.stdout_lines | length > 0 %}
          {{ item.item.split(' : ')[1] }} is attached to instances: {{ item.stdout_lines | join(', ') }} in accountID {{ item.item.split(' : ')[0] }}
          {% endif %}
          {% endfor %}
      delegate_to: localhost
