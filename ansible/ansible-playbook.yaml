---
- name: Ensure AWS CLI is installed
  hosts: your_target_hosts    
  tasks:
    - name: Check if AWS CLI is installed
      command: aws --version
      ignore_errors: true
      register: aws_cli_check

    - name: Update package index
      apk:
        update_cache: yes
        state: latest

    - name: Install AWS CLI if not present
      when: aws_cli_check.rc != 0
      pip:
        name: awscli
        state: latest
        executable: pip

- name: Create AWS Config and Credentials files
  hosts: localhost
  vars:
    region: "eu-west-1"
    rolename: "StackGuardian"
    external_id: "external_id"
    existing_profiles: [] 
  tasks:
    - name: Ensure artifacts directory exists
      ansible.builtin.file:
        path: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts"
        state: directory
        mode: '0755'
    - name: Read input lines from file
      slurp:
        src: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/input.txt"
      register: input_content
    - set_fact:
        input_lines: "{{ input_content.content | b64decode | regex_replace('\\r\\n|\\r|\\n', '\\n') | split('\n') }}"
      changed_when: false
    - name: Extract account IDs from input lines
      set_fact:
        account_ids: "{{ input_content.content | b64decode | split('\n') | map('regex_replace', '^([0-9]+) : .+', '\\1') | unique | list }}"
      become: no

    - name: Ensure config file exists
      file:
        path: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/config"
        state: touch

    - name: Create AWS config profiles for each unique account ID
      lineinfile:
        path: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/config"
        line: "[profile {{ item }}]\nregion = {{ region }}\nrole_arn = arn:aws:iam::{{ item }}:role/{{ rolename }}\nsource_profile = default\nexternal_id = {{ external_id }}\n"
        create: yes
      loop: "{{ account_ids }}"
    
    - name: Ensure credentials file exists
      file:
        path: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/credentials"
        state: touch
      delegate_to: localhost

    - name: Create AWS credentials file
      copy:
        content: |
          [default]
          aws_access_key_id = ${AWS_ACCESS_KEY_ID}
          aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
          region = eu-central-1
        dest: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/credentials"
      with_items: "{{ input_lines }}"
      delegate_to: localhost

    - name: Get attached instances and filter by running state
      shell: "aws ec2 describe-volumes --region {{ region }} --volume-ids {{ item.split(' : ')[1] }} --query 'Volumes[0].Attachments[?State==`attached`].InstanceId' --output text --profile {{ item.split(' : ')[0] }}"
      loop: "{{ input_lines }}"
      register: instance_ids
      changed_when: false
      ignore_errors: true

    - name: Ensure output file exists
      file:
        path: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/outputs.txt"
        state: touch
      delegate_to: localhost

    - name: Generate output file with running instances
      blockinfile:
        path: "/tmp/STACKGUARDIAN_WORKSPACE/artifacts/outputs.txt"
        block: |
          {% for item in instance_ids.results %}
          {% if item.stdout_lines | length > 0 %}
          {{ item.item.split(' : ')[1] }} is attached to instances: {{ item.stdout_lines | join(', ') }} in accountID {{ item.item.split(' : ')[0] }}
          {% endif %}
          {% endfor %}
      delegate_to: localhost

